name: Vitruvius CI/CD

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: vitruvius-backend
  ECR_REPOSITORY_WORKER: vitruvius-worker  
  ECR_REPOSITORY_FRONTEND: vitruvius-frontend
  ECS_CLUSTER: vitruvius-cluster
  ECS_SERVICE_BACKEND: vitruvius-backend-service
  ECS_SERVICE_WORKER: vitruvius-worker-service
  ECS_SERVICE_FRONTEND: vitruvius-frontend-service

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Backend Dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Run Backend Linting
      run: |
        cd backend
        flake8 app --max-line-length=100 --ignore=E501,W503

    - name: Run Backend Tests
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html:htmlcov --cov-fail-under=80

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Frontend Linting
      run: |
        cd frontend
        npm run lint

    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

    - name: Run E2E Tests
      run: |
        cd e2e-tests
        npm ci
        npx playwright install --with-deps
        npx playwright test
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          backend/htmlcov/
          backend/coverage.xml
          e2e-tests/test-results/
          e2e-tests/playwright-report/
        retention-days: 30

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        # Build without secrets to prevent leakage in Docker history
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -f backend/Dockerfile backend/
        
        # Tag with branch name for easier identification
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$BRANCH_NAME
        
        # Only tag as latest if on main/master branch
        if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        fi
        
        # Always push the SHA and branch tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$BRANCH_NAME

    - name: Build, tag, and push Worker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        # Build without secrets to prevent leakage in Docker history
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG -f backend/Dockerfile.worker backend/
        
        # Tag with branch name for easier identification
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$BRANCH_NAME
        
        # Only tag as latest if on main/master branch
        if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:latest
        fi
        
        # Always push the SHA and branch tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$BRANCH_NAME

    - name: Build, tag, and push Frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -f frontend/Dockerfile frontend/
        
        # Tag with branch name for easier identification
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$BRANCH_NAME
        
        # Only tag as latest if on main/master branch
        if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        fi
        
        # Always push the SHA and branch tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$BRANCH_NAME

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Clean up old images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Clean up old images to prevent ECR storage bloat
        # Keep only the last 10 images for each repository
        for repo in $ECR_REPOSITORY_BACKEND $ECR_REPOSITORY_WORKER $ECR_REPOSITORY_FRONTEND; do
          echo "Cleaning up old images for $repo..."
          aws ecr describe-images --repository-name $repo --query 'imageDetails[?imageDigest!=null]' --output json | \
            jq '.[] | select(.imageTags | length > 0) | {imageDigest: .imageDigest, imagePushedAt: .imagePushedAt}' | \
            jq -s 'sort_by(.imagePushedAt) | reverse | .[10:]' | \
            jq -r '.[] | .imageDigest' | \
            while read digest; do
              if [ ! -z "$digest" ]; then
                aws ecr batch-delete-image --repository-name $repo --image-ids imageDigest=$digest || true
              fi
            done
        done

    - name: Deploy with Secure Secrets Management
      env:
        IMAGE_TAG: ${{ github.sha }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        # Use secure deployment script that handles secrets via AWS Secrets Manager
        chmod +x scripts/secure-deploy.sh
        ./scripts/secure-deploy.sh $IMAGE_TAG $BRANCH_NAME

    - name: Deploy Frontend to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update ECS task definition with new image
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE_FRONTEND \
          --force-new-deployment \
          --region $AWS_REGION

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for backend deployment..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE_BACKEND \
          --region $AWS_REGION

        echo "Waiting for worker deployment..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE_WORKER \
          --region $AWS_REGION

        echo "Waiting for frontend deployment..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE_FRONTEND \
          --region $AWS_REGION

        echo "Deployment completed successfully!"

    - name: Verify deployment
      run: |
        # Get service status
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE_BACKEND $ECS_SERVICE_WORKER $ECS_SERVICE_FRONTEND \
          --region $AWS_REGION \
          --query 'services[*].{ServiceName:serviceName,Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
          --output table
